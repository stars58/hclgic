
Common SQL scripts to help identify processes / performance
Checking
SQL
Session / Node with highest I/O	
select * from gv$sess_io order by 4
   INST_ID        SID BLOCK_GETS CONSISTENT_GETS PHYSICAL_READS BLOCK_CHANGES CONSISTENT_CHANGES OPTIMIZED_PHYSICAL_READS     CON_ID
---------- ---------- ---------- --------------- -------------- ------------- ------------------ ------------------------ ----------
         1       2870          0       461373730              1      34444561          235857653                        0          0
         2       2568          0       477735007              0      31091716          197937767                        0          0
         2       2870          0       492758863              0      31523945          204430833                        0          0
         2       2490    4868011       560974351          32465       3844628            1168923                        0          4
         2        972   12918364      1360411937       76636700      16357761                215                        0          4
﻿
Active DB session taking more CPU	
  SELECT ss.USERNAME, se.SID, se.VALUE / 100 CPU_USAGE_SECONDS
    FROM V$SESSION ss, V$SESSTAT se, V$STATNAME sn
    WHERE se.STATISTIC# = sn.STATISTIC#
      AND NAME LIKE '%CPU used by this session%'
      AND se.SID = ss.SID
      AND ss.STATUS = 'ACTIVE'
      AND ss.USERNAME IS NOT NULL
   ORDER BY VALUE;
DB session consuming most memory	
SELECT a.username, a.osuser, a.program, b.spid,b.pga_used_mem, a.sid, a.serial# ,a.module,a.logon_time,a.terminal FROM v$session a, v$process b WHERE a.paddr = b.addr
order by
b.pga_used_mem desc;
DB Session creating most REDO per PDB	
set linesize 200
col program for a25
col username for a20
col name for a10
SELECT s.inst_id, c.name, s.sid, s.serial#, s.username, s.program,
i.block_changes, s.sql_id, s.prev_sql_id
FROM gv$containers c, gv$session s, gv$sess_io i
WHERE
c.inst_id = s.inst_id
and c.con_id = s.con_id
and s.sid = i.sid
and i.block_changes > 100000
ORDER BY 7;
SQL causing most REDO in any AWR time period	
    SELECT   a.sql_id,
             SUM(a.disk_reads_total)      disk_reads_total,
             SUM(a.rows_processed_total)  rows_processed_total,
             SUM(a.direct_writes_total) direct_write_total
    from dba_hist_sqlstat a,
         dba_hist_sqltext  dht,
         dba_hist_snapshot dhs
    WHERE    a.snap_id = dhs.snap_id and a.sql_id = dht.sql_id
      and begin_interval_time BETWEEN to_date('2020_10_14 09','YYYY_MM_DD HH24')
  and to_date('2020_10_15 09','YYYY_MM_DD HH24')
 GROUP BY a.sql_id;
SQL with high TEMP usage in any AWR time period	
select distinct a.session_id, a.sql_id, a.temp_space_allocated
from DBA_HIST_ACTIVE_SESS_HISTORY a,
     dba_hist_snapshot dhs
WHERE a.snap_id = dhs.snap_id
and begin_interval_time BETWEEN to_date('2023_01_11 07','YYYY_MM_DD HH24')
 and to_date('2023_11_12 23','YYYY_MM_DD HH24')
and a.temp_space_allocated > 30000000000
-- and a.temp_space_allocated is not null
order by 2
/
Blocking Locks


download and run.    output will show the blocking(including across RAC)
show_rac_lock.sql
SQL with highest optimizer cost	
 select a.sid, a.username, a.sql_id, b.optimizer_cost
  from v$session a, v$sqlarea b
 where a.sql_id = b.sql_id
 and b.optimizer_cost is not null
 order by 4;
look for patterns. e.g.
       SID USERNAME                       SQL_ID        OPTIMIZER_COST
---------- ------------------------------ ------------- --------------
      1843 MICROSDB                       g6195fbt5p9z6           4634
      4273 MICROSDB                       g6195fbt5p9z6           4634
      4384 MICROSDB                       g6195fbt5p9z6           4634
      6802 MICROSDB                       g6195fbt5p9z6           4634
      2599 MICROSDB                       13axadzpkp0n1           7891
      6652 MICROSDB                       13axadzpkp0n1           7891
      1083 MICROSDB                       377kr4dkjpryf          99244
      1832 MICROSDB                       377kr4dkjpryf          99244
      3231 MICROSDB                       377kr4dkjpryf          99244
      5006 MICROSDB                       377kr4dkjpryf          99244
      3212 MICROSDB                       8m1q2uybnqwnr        1201493
﻿
Explain Plan	
SQL> set lines 200
SQL> select * from table(dbms_xplan.display_cursor('<sql_id>'))

SQL> l
  1* select * from table(dbms_xplan.display_cursor('8m1q2uybnqwnr'))
SQL> /

PLAN_TABLE_OUTPUT
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  8m1q2uybnqwnr, child number 0
-------------------------------------
insert into tmpchkPurge(CheckId,Guid)
select CheckId,Guid from CHECKS c where c.CloseStatus = 2 AND
c.CheckClose < :dt AND SUBSTR(c.Status,35,1) = '0' AND SUBSTR(c.status,
40, 1) like '0'  and rownum <= 10000

Plan hash value: 174316330

-----------------------------------------------------------------------------------------------------
| Id  | Operation                             | Name        | Rows  | Bytes | Cost (%CPU)| Time     |

PLAN_TABLE_OUTPUT
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT                      |             |       |       |  1201K(100)|          |
|   1 |  LOAD TABLE CONVENTIONAL              | TMPCHKPURGE |       |       |            |          |
|*  2 |   COUNT STOPKEY                       |             |       |       |            |          |
﻿